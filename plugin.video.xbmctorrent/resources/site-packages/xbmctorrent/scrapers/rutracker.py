# -*- coding: utf-8 -*-

import re
import xbmc
import xbmcgui
from traceback import format_exc
from xbmcswift2 import actions
from xbmctorrent import plugin
from xbmctorrent.caching import cached_route, CACHE_DIR
from xbmctorrent.scrapers import scraper
from xbmctorrent.utils import ensure_fanart

BASE_URL = plugin.get_setting("base_rutracker")  # "https://rutracker.org/forum/"
# update http -> https
if BASE_URL == "http://rutracker.org/forum/":
    BASE_URL = "https://rutracker.org/forum/"
    plugin.set_setting("base_rutracker", BASE_URL)

HEADERS = {
    'Referer': BASE_URL,
    'Accept': 'text/html, application/xml, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*',
    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
    'Accept-Charset': 'utf-8, *;q=0.1',
    'Accept-Encoding': 'identity, *;q=0'
}

topic_id_parser = re.compile(r'\?t=(\d*)$', re.U)
search_id_parser = re.compile(r'\?id=(.*)\&', re.U)

CATEGORIES = (
    ("7", u"Зарубежные фильмы", "movies", "tmdb"),
    ("313", u"Зарубежное кино (HD Video)", "movies", "tmdb"),
    ("22", u"Наши фильмы", "movies", "kinopoisk"),
    ("312", u"Наше кино (HD Video)", "movies", "kinopoisk"),
    ("189", u"Зарубежные Сериалы", "tvshows", "tvdb"),
    ("2366", u"Зарубежные Сериалы (HD Video)", "tvshows", "tvdb"),
    ("9", u"Русскоязычные сериалы", "tvshows", "tvdb"),
    ("2199", u"Классика зарубежного кино (HD Video)", "movies", "tmdb"),
    ("46", u"Документальные фильмы и телепередачи", "movies", ""),
    ("24", u"Развлекательные телепередачи и шоу, приколы и юмор", "tvshows", ""),
    ("4", u"Мультипликация", "movies", "tmdb"),
    # ("10", u"Аниме", "movies", ""),
    # ("13", u"Спорт и Здоровье", "tvshows", ""),
    # ("15", u"Юмор", "tvshows", ""),
    # ("14", u"Хозяйство и Быт", "tvshows", ""),
)

# Cache TTLs
DEFAULT_TTL = 300  # 5 minutes

IGNORE = [u"Repack", u" PC |", u" РС", u" PC", u" PS", u"XBOX", u"RePack", u"FB2", u"TXT", u"DOC", u" MP3", u" JPG", u" PNG", u" SCR", u"PDF"]
IGNORE_EXT = [u".srt", u".ssa", u".txt", u".ac3", u".aac", u".jpg"]

_cookiejar = None


def udec(x):
    return x.decode('utf-8')


def uenc(x):
    return x.encode('utf-8')


@scraper("Rutracker.org", "https://static2.t-ru.org/logo/logo.gif", plugin.get_setting("rutracker_enabled", bool))
@plugin.route("/rutracker")
@ensure_fanart
def rutracker_index():
    for cat in CATEGORIES:
        yield {
            "label": cat[1],
            "path": plugin.url_for("rutracker_page", catind=cat[0], page=0, query=cat[0]),
        }


@plugin.route("/rutracker/browse/<catind>/<page>/<query>")
@cached_route(ttl=DEFAULT_TTL, content_type="movies")
@ensure_fanart
def rutracker_page(catind, page, query=None):
    from bs4 import BeautifulSoup
    from urlparse import urljoin
    from concurrent import futures
    from contextlib import closing
    from xbmctorrent.utils import SafeDialogProgress

    scraper_name = ""
    category = ([cat for cat in CATEGORIES if cat[0] == catind] or [("0", u"", "", "")])[0]
    scraper_name = category[3]
    plugin.set_content(category[2])
    page = int(page)

    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        dialog.create(plugin.name)
        dialog.update(percent=0, line1=u"Получение информации о раздачах...", line2="", line3="")

        items = []
        try:
            url = urljoin(BASE_URL, "viewforum.php?f=%s&start=%s" % (query, str(page * 50)))
            html_data = url_get(url, headers=HEADERS)
            soup = BeautifulSoup(html_data, "html5lib")
            # find subforums
            nodes = soup.findAll("h4", class_=["forumlink"])

            # Add search item on topmost page:
            if catind == query:
                yield {
                    "label": u"[COLOR FFFFFF00][ Поиск ][/COLOR]",
                    "path": plugin.url_for("rutracker_search", catind=catind),
                }

            for node in nodes:
                link = node.find("a")
                link_href = link["href"]
                # find forum id in href:
                forumid = int(link_href[link_href.find(u"=") + 1:len(link_href)])
                item = {
                    "label": link.text,
                    "path": plugin.url_for("rutracker_page", catind=catind, page=0, query=forumid),
                    "info": {"title": link.text},
                    "is_playable": False,
                }
                yield item

            nodes = soup.findAll("td", class_=["topic_id"])

            for node in nodes:
                id = node["id"]
                title_node = node.parent.find(id='tt-%s' % str(id))
                title = _rutracker_cleantitle(title_node.text)
                row_node = node.parent \
                    # find "size" table cell - it should have download link
                size_td = row_node.find_all("td")[2]

                # check if size node has download link to torrent file:
                if size_td:
                    size_link = size_td.find("a", class_=["small"])
                    if size_link:
                        size = size_link.text
                        seeds = size_td.find("span", class_=["seedmed"]).b.text
                        peers = size_td.find("span", class_=["leechmed"]).b.text
                        size = size_td.find("a", class_=["small"]).text
                        label = "%s | %s (S:%s P:%s)" % (title, size, seeds, peers)
                        item = {
                            "label": label,
                            "path": plugin.url_for("rutracker_play", tid=id),
                            "info": {"title": title},
                            "is_playable": True,
                            "context_menu": [
                                ("Play with Pulsar", actions.update_view(plugin.url_for("rutracker_play_pulsar", tid=id)))
                            ]
                        }
                        items.append(item)
        except:
            plugin.log.error("Unexpected error: %s" % format_exc().split('\n')[-2])
            xbmcgui.Dialog().ok(plugin.name, "Не удалось получить данные от сервера")
            return

        with futures.ThreadPoolExecutor(max_workers=5) as pool:
            from xbmctorrent.utils import get_item_info

            usesearch = plugin.get_setting("rutracker_usesearch", bool)
            jobs = [pool.submit(get_item_info, i, usesearch and scraper_name or None) for i in items]
            state = {"done": 0}

            def on_done(future):
                if not future.cancelled():
                    state["done"] += 1
                    data = future.result()
                    dialog.update(
                        percent=int(state["done"] * 100.0 / len(jobs)),
                        line2=data["info"].get("title") or data.get("label") or "",
                    )

            [job.add_done_callback(on_done) for job in jobs]
            while not all(job.done() for job in jobs):
                if dialog.iscanceled():
                    [job.cancel() for job in jobs]
                    return
                xbmc.sleep(100)
            items = [job.result() for job in jobs if not job.cancelled()]

        for item in items:
            del item["search"]
            del item["subdir"]
            yield item

        next_page = {
            "label": u"[COLOR FF00FF00][Далее >][/COLOR]",
            "path": plugin.url_for("rutracker_page", catind=catind, page=page + 1, query=query),
            "is_playable": False,
        }
        yield next_page


@plugin.route("/rutracker/search/<catind>/<page>/<search>")
@cached_route(ttl=DEFAULT_TTL, content_type="movies")
@ensure_fanart
def rutracker_search_page(catind, page, search=None, search_id=None):
    from bs4 import BeautifulSoup
    from urlparse import urljoin
    from concurrent import futures
    from contextlib import closing
    from xbmctorrent.utils import SafeDialogProgress

    scraper_name = ""
    category = ([cat for cat in CATEGORIES if cat[0] == catind] or [("0", u"", "", "")])[0]
    scraper_name = category[3]
    plugin.set_content(category[2])
    if plugin.request.args.get("search_id"):
        search_id = plugin.request.args.get("search_id")[0]
    page = int(page)
    catind = int(catind)

    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        dialog.create(plugin.name)
        dialog.update(percent=0, line1=u"Получение информации о раздачах...", line2="", line3="")

        items = []
        try:
            url = urljoin(BASE_URL, "search.php?")

            if search_id:
                params = {}
                params["nm"] = search
                if int(page) > 0:
                    params["start"] = int(page) * 50
                params["id"] = search_id
                html_data = url_get(url, headers=HEADERS, params=params)
            else:
                post_body = {"nm": search, "fsf": catind}
                html_data = url_get(url, headers=HEADERS, post=post_body)

            soup = BeautifulSoup(html_data, "html5lib")

            node = soup.find("a", class_=["pg"])
            if node:
                r = search_id_parser.search(node['href'])
                if r:
                    plugin.log.debug("Search id found: " + str(r.group(1)))
                    search_id = str(r.group(1))

            for link in soup.findAll("a", class_=["topictitle"]):
                try:
                    title = _rutracker_cleantitle(link.text)
                    r = topic_id_parser.search(link['href'])
                    if r:
                        id = r.group(1)
                        label = "%s" % (title)
                        item = {
                            "label": label,
                            "path": plugin.url_for("rutracker_play", tid=id),
                            "info": {"title": title},
                            "is_playable": True,
                            "context_menu": [
                                ("Play with Pulsar", actions.update_view(plugin.url_for("rutracker_play_pulsar", tid=id)))
                            ]
                        }
                        items.append(item)
                except:
                    plugin.log.error("Unexpected error: %s \r Skipping item" % format_exc().split('\n')[-2])
        except:
            plugin.log.error("Unexpected error: %s" % format_exc().split('\n')[-2])
            xbmcgui.Dialog().ok(plugin.name, "Не удалось получить данные от сервера")
            return

        with futures.ThreadPoolExecutor(max_workers=5) as pool:
            from xbmctorrent.utils import get_item_info

            usesearch = plugin.get_setting("rutracker_usesearch", bool)
            jobs = [pool.submit(get_item_info, i, usesearch and scraper_name or None) for i in items]
            state = {"done": 0}

            def on_done(future):
                if not future.cancelled():
                    state["done"] += 1
                    data = future.result()
                    dialog.update(
                        percent=int(state["done"] * 100.0 / len(jobs)),
                        line2=data["info"].get("title") or data.get("label") or "",
                    )

            [job.add_done_callback(on_done) for job in jobs]
            while not all(job.done() for job in jobs):
                if dialog.iscanceled():
                    [job.cancel() for job in jobs]
                    return
                xbmc.sleep(100)
            items = [job.result() for job in jobs if not job.cancelled()]

        for item in items:
            del item["search"]
            del item["subdir"]
            yield item

        if search_id:
            next_page = {
                "label": u"[COLOR FF00FF00][Далее >][/COLOR]",
                "path": plugin.url_for("rutracker_search_page", catind=catind, page=page + 1, search=search, search_id=search_id),
                "is_playable": False,
            }
            yield next_page


@plugin.route("/rutracker/search/<catind>")
def rutracker_search(catind):
    query = plugin.request.args.get("query")
    if query:
        query = query[0]
    else:
        query = plugin.keyboard("", "Rutracker.org - Search")

    if query:
        plugin.redirect(plugin.url_for("rutracker_search_page", catind=catind, page=0, search=query))


@plugin.route("/rutracker/play/<tid>", options={"pulsar": "0"})
@plugin.route("/rutracker/play/pulsar/<tid>", name="rutracker_play_pulsar", options={"pulsar": "1"})
@ensure_fanart
def rutracker_play(tid, pulsar):
    from contextlib import closing
    from bencode import bdecode
    from urlparse import urljoin
    from xbmctorrent.magnet import generate_magnet
    from xbmctorrent.utils import first, SafeDialogProgress
    from xbmctorrent.acestream import ace_supported

    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        dialog.create(plugin.name)
        dialog.update(percent=0, line1="Получение информации о раздаче...")

        try:
            data = url_get(urljoin(BASE_URL, "dl.php?t=%s" % tid))
            metadata = bdecode(data)
        except:
            plugin.log.error("Unexpected error: %s " % format_exc().split('\n')[-2])
            xbmcgui.Dialog().ok(plugin.name, "Не удалось получить данные от сервера")
            return

        dialog.update(percent=100, line1="Готово")

        if "files" in metadata["info"]:  # and ace_supported():
            items = []
            for index, info in enumerate(metadata["info"]["files"]):
                name = "/".join(info["path"])
                decname = _rutracker_decode_try(name)
                if not _rutracker_valid_file(decname):
                    continue
                name = uenc(decname)

                if plugin.get_setting("torrent_engine", int) == 1 and ace_supported():
                    path = plugin.url_for("play_torrent_raw", raw=data, index=index, name=name)
                else:
                    path = plugin.url_for("play_file", uri=generate_magnet(metadata, name), index=index)

                items.append({"label": name, "path": path})

            if len(items) == 1:  # start playback if torrent contains only one file
                plugin.redirect(items[0]["path"])
            else:
                select_items = [item["label"] for item in items]
                select = xbmcgui.Dialog().select("Выберите файл для проигрывания", select_items)
                if select >= 0:
                    plugin.redirect(items[select]["path"])
        else:
            name = metadata["info"].get("name") or " / ".join(first(metadata["info"]["files"])["path"]) or "rutracker.org"
            if plugin.get_setting("torrent_engine", int) == 1 and ace_supported():
                path = plugin.url_for("play_torrent_raw", raw=data, index=0, name=name)
            else:
                path = plugin.url_for(["play", "play_with_pulsar"][int(pulsar)], uri=generate_magnet(metadata, name))
            plugin.redirect(path)


def _rutracker_decode_try(name):
    try:
        decoded = name.decode("utf-8")
    except UnicodeDecodeError:
        try:
            decoded = name.decode("cp1251")
        except UnicodeDecodeError:
            decoded = name.decode("utf-8", "ignore")
    return decoded


def _rutracker_valid_file(filename):
    for exclude in IGNORE_EXT:
        if filename.endswith(exclude):
            return False
    return True


def _rutracker_cleantitle(title):
    # k1=title.find('/')
    # if k1<0: k1=title.find('(')
    k1 = title.find('(')
    tmp1 = title[:k1]
    n1 = -1
    if tmp1.find('[') < 0:
        n1 = title.find('[')
    if n1 < 0:
        n1 = title.find('(')
    k2 = title.find(u" от ")
    if k2 < 0:
        k2 = None
    tmp2 = title[n1:k2]
    title = tmp1 + tmp2
    title = title.replace(u"| Лицензия", "")
    title = title.replace(u"| лицензия", "")
    title = title.replace(u"| ЛицензиЯ", "")
    return title.strip()


def get_cookie_jar():
    global _cookiejar
    if not _cookiejar:
        import os
        import xbmcvfs
        import cookielib

        sid_file = os.path.join(CACHE_DIR, 'RuTracker.cookies.dat')
        _cookiejar = cookielib.MozillaCookieJar(sid_file)

        if not xbmcvfs.exists(sid_file):
            _cookiejar.save()

        _cookiejar.load()
    return _cookiejar


def _rutracker_login(cookie_handler):
    from urlparse import urljoin
    from xbmctorrent.utils import url_get as url_get_origin

    values = {
        "login_username": plugin.get_setting("rutracker_login"),
        "login_password": plugin.get_setting("rutracker_passw"),
        "login": "Вход"
    }

    headers = HEADERS.copy()
    headers["Referer"] = urljoin(BASE_URL, "index.php")
    headers["Content-Type"] = "application/x-www-form-urlencoded"

    html = url_get_origin(urljoin(BASE_URL, "login.php"), post=values, headers=headers, handlers=[cookie_handler])
    if html.find("profile.php?mode=sendpassword") >= 0:
        plugin.notify("Проверьте настройки авторизации.", delay=15000)
    else:
        plugin.log.debug("login sucessfull.")
        return True

    return False


def url_get(url, params={}, headers={}, post=None):
    from urllib2 import HTTPCookieProcessor, URLError
    from xbmctorrent.utils import url_get as url_get_origin

    _cookiejar = get_cookie_jar()
    cookie_handler = HTTPCookieProcessor(_cookiejar)

    plugin.log.debug("loading uri: %s with cookies %s params %s post %s" % (url, _cookiejar, str(params), str(post)))

    try:
        result = url_get_origin(url, params, headers, post, handlers=[cookie_handler])
    except URLError:
        result = "profile.php?mode=sendpassword"
        pass

    if url.find("dl.php?") >= 0 and result.find("profile.php?mode=sendpassword") >= 0:
        if not plugin.get_setting("rutracker_login") or not plugin.get_setting("rutracker_passw"):
            plugin.notify("Проверьте настройки авторизации.", delay=15000)
            return ""
        if not _rutracker_login(cookie_handler):
            return ""

        _cookiejar.save()
        result = url_get_origin(url, params, headers, post, handlers=[cookie_handler])
        pass

    plugin.log.debug("uri loaded: " + url)
    return result
